var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CornerPlotting","category":"page"},{"location":"#CornerPlotting","page":"Home","title":"CornerPlotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CornerPlotting.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CornerPlotting is meant to be a simple tool to produce corner plots, report credible intervals using highest density intervals, and customize plots with extra elements aftewards. This package uses Makie as a backend. For another tool for corner plots with a very extensive variety of options, be sure to check PairPlots, which also uses Makie as a backend. Other alternatives include StatsPlots.cornerplot and CornerPlot.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CornerPlotting]","category":"page"},{"location":"#CornerPlotting.CornerPlot","page":"Home","title":"CornerPlotting.CornerPlot","text":"struct CornerPlot(fig, ranges, distributions_1d, distributions_2d)\n\nStores the elements of a CornerPlot to allow easy access to figure elements. \"fig\" contains the Makie figure, \"ranges\" corresponds to the ranges used for each variable in each plot, as well as to determine credible intervals. The Axes with 1D marginalized distributions are stored in the dictionary \"distributions1d\", using as keys the name of each variable. Similarly, \"distributions2d\" provides the Axes with 2D marginalized distributions as a dictionary of dictionaries. \n\n\n\n\n\n","category":"type"},{"location":"#CornerPlotting.CornerPlot-Tuple{Any, Vector{Symbol}}","page":"Home","title":"CornerPlotting.CornerPlot","text":"CornerPlot(results, names; ...)\n\nConstructs a corner plot from the provided \"results\", using the variables given in the \"names\" vector. \n\nArguments:\n\nresults: Array containing the samples to be plotted. This can be either of type MCMCChains\n\nor a Dictionary containing vectors with values for an individual chain, or arrays for multiple chains (in this case each column represents a chain). \n\nnames: Vector of symbols containing the key needed to access each result from results.\n\nThe corner plot will only include the values specified in names.\n\nlabels: Dictionary of strings containing the labels that should be used for each variable.\nranges: Dictionary of two element vectors, containing the ranges that will be used for each\n\nvariable of the plot. If ranges are not provided for a variable these are determined based on the quantile_for_range option.\n\nscaling: Dictionary containing scaling factors for variables. For any name in names that\n\nis also a key of scaling, all values are divided by scaling[name].\n\nfig: The Makie figure used for the plot. If not provided it is created.\nquantileforrange: If ranges are not specified for an axis, then they are set to be between\n\nthe quantiles quantile_for_range and 1- quantile_for_range. This is done using weighted quantiles if use_weights=true\n\nuse_weights: If true, then results[:weights] is expected to be defined to provide weights\n\nfor each sample.\n\nfraction_1d: Fraction of samples contained in the shown 1D credible intervals. Credible intervals\n\nare determined using highest density intervals. By default 90% credible intervals are shown.\n\nfractions2d: Similar to `fraction1d`, but used to determine the contours in the 2D marginalized\n\ndistributions. Values are provided as a Vector of fractions.\n\nshow_CIs: If true, credible intervals are shown in the corner plot.\nnbins: Number of bins in each axis used to plot the heatmaps and the 1D marginalized distributions\nnbins_contour: Number of bins used to plot the contours in the 2D marginalized distributions.\n\nusing nbins_contour<nbins allows for smoother contous.\n\naxis_size: The Makie axis will be set to have width and height equal to this value.\n\nOutput:\n\nReturns an instance of CornerPlot\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.default_theme-Tuple{}","page":"Home","title":"CornerPlotting.default_theme","text":"default_theme()\n\nReturns a Makie theme that will produce a nice plot.\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.get_bounds_for_fractions-Tuple{Any, Any}","page":"Home","title":"CornerPlotting.get_bounds_for_fractions","text":"get_bounds_for_fractions(h, fractions)\n\nCalculate the probability values that corresponds to a given set of highest density intervals.\n\nArguments:\n\nh: h is expected to be a vector or array containing the values of a PDF\n\nwithin a regular grid. This can be either a 1D vector for 1D marginalized distributions, or a 2D vector for the 2D marginalized distributions. Can also be used for higher dimensional cases though.\n\nfractions: Vector containing the individual fractions that are contained within the HDIs.\n\nfor example, fractions=[0.5,0.9] means that the value of the PDF corresponding to the 50% and 90% HDIs will be computed.\n\nOutput:\n\nbounds: Vector containing the values of the PDF corresponding to the HDIs that contain\n\nthe fraction of the samples given by fractions.\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.plot_1D_density-NTuple{5, Any}","page":"Home","title":"CornerPlotting.plot_1D_density","text":"plot_1D_density(axis, values, range, chain_weights, fraction_1D, nbins; color, linewidth)\n\nCreates a 1D marginalized distribution plot in axis from the sample values given in values. The plotted line is normalized, such that it corresponds to the PDF followed by the samples.\n\nArguments:\n\naxis: The Axis on which the distribution will be plotted. If set to nothing, no plot will be made,\n\nbut the values used for the plot will still be returned.\n\nvalues: Either a vector or a matrix of numbers, corresponding to a single chain or multiple chains\n\nrespectively (in the latter case, columns represent individual samples).\n\nrange: Vector with two values containing the range of the plot. It also corresponds to the range\n\nthat will be used to determine the HDI. The HDI does correct for values outside the range, assuming that these do not fall within the highest density region.\n\nchain_weights: weights used for each sample, should have the same size as values.\nfraction_1d: Fraction of samples (including weights) condained within the HDI for which the\n\ncredible interval is reported.\n\nnbins: Number of bins used to build the histogram and determine the HDI\ncolor: color used for the line plot.\nlinewidth: linewidth used for the line plot\n\nOutput:\n\nx: Bin centers used in the histogram\nh: Output of Histogram fit. This is not normalized, so it contains the sum of all weights\n\n(or count of all samples) within each bin.\n\ny: Value of the PDF estimated at each bin\nfrac_lost: Fraction of samples (including weights) that is outside of range\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.plot_2D_density-NTuple{9, Any}","page":"Home","title":"CornerPlotting.plot_2D_density","text":"plot_2D_density(axis, values, range, chain_weights, fraction_1D, nbins; color, linewidth)\n\nCreates a 1D marginalized distribution plot in axis from the sample values given in values. The plotted line is normalized, such that it corresponds to the PDF followed by the samples.\n\nArguments:\n\naxis: The Axis on which the distribution will be plotted. If set to nothing, no plot will be made,\n\nbut the values used for the plot will still be returned.\n\nname_x: Symbol containing the name for the variable on the x-axis. Only used to report if too\n\nmany samples are outside the range to determine a good HDI.\n\nnamey: Same as `namex` but for the y-axis.\nvaluesx: Values for each sample corresponding to the variable `namex`.\n\nEither a vector or a matrix of numbers, corresponding to a single chain or multiple chains respectively (in the latter case, columns represent individual samples). The heatmap will include values from all chains.\n\nvaluesy: Same as `valuesx` but for the y-axis.\nrange_x: Vector with two values containing the range of the plot for the x-axis variable. It also corresponds to the range\n\nthat will be used to determine the HDI. The HDI does correct for values outside the range, assuming that these do not fall within the highest density region.\n\nrangey: Same as `rangex` but for the y-axis.\nsample_weights: weights used for each sample, should have the same size as values.\nfractions: Contours will be plotted corresponding the HDIs containing each fraction contained in fractions.\nnbins: Number of bins used for the heatmap.\nnbins_contours: Number of bins used to determine the contours for the HDIs.\n\nOutput:\n\nx_hm: Bin centers used in the heatmap in the x-axis\ny_hm: Bin centers used in the heatmap in the y-axis\nz_hm: Value of the PDF estimated at each bin of the heatmap\ndx_hm: Size of bins used for heatmap in the x-axis\ndy_hm: Size of bins used for heatmap in the y-axis\nxct: Same as `xhm` but for the contours.\nyct: Same as `yhm` but for the contours.\nzct: Same as `zhm` but for the contours.\ndxct: Same as `dxhm` but for the contours.\ndyct: Same as `dyhm` but for the contours.\nbounds: probablity values corresponding to the HDIs\nfrac_lost: Fraction of samples (including weights) that is outside of the ranges\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.plot_compound_1D_density-NTuple{7, Any}","page":"Home","title":"CornerPlotting.plot_compound_1D_density","text":"plot_compund_1D_density(axis, values, range, chain_weights, fraction_1D, nbins; color, linewidth)\n\nCreates a 1D marginalized distribution plot in axis from the sample values given in values. If values contains more than one chain, it will plot the individual chains separetely, as well as one line plot containing all of the samples from all chains.\n\nArguments:\n\naxis: The Axis on which the distribution will be plotted. If not provided, no plot will be made,\n\nbut the values used for the plot will still be returned.\n\nname: Symbol containing the name of the variable.\nvalues: Either a vector or a matrix of numbers, corresponding to a single chain or multiple chains\n\nrespectively (in the latter case, columns represent individual samples).\n\nrange: Vector with two values containing the range of the plot. It also corresponds to the range\n\nthat will be used to determine the HDI. The HDI does correct for values outside the range, assuming that these do not fall within the highest density region.\n\nsample_weights: weights used for each sample, should have the same size as values.\nfraction_1d: Fraction of samples (including weights) condained within the HDI for which the\n\ncredible interval is reported.\n\nnbins: Number of bins used to build the histogram and determine the HDI\n\nOutput:\n\n(xmin, xmode, xmax): Credible interval edges and mode.\nx: Bin centers used in the histogram. This will include all samples from all chains.\nh: Output of Histogram fit. This is not normalized, so it contains the sum of all weights\n\n(or count of all samples) within each bin.\n\ny: Value of the PDF estimated at each bin\nfrac_lost: Fraction of samples (including weights) that is outside of range\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.plot_extra_1D_distribution-Tuple{Any, Any, Distributions.Distribution}","page":"Home","title":"CornerPlotting.plot_extra_1D_distribution","text":"plot_extra_1D_distribution()\n\nPlots a distribution in one of the panels containing a marginalized 1D distribution of a corner plot The Distribution will be plotted within the range determined for the panel.\n\nArguments:\n\ncorner_plot: An instance of CornerPlot containing a plotted figure.\nname_x: Identifies the panel in which the distribution will be plotted.\ndistribution: 1D distribution to be plotted.\nnpoints: Number of points of the line plot.\nlinewidth: Property for line plot.\ncolor: Property for line plot.\nlinestyle: Property for line plot.\n\n\n\n\n\n","category":"method"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"EditURL = \"../../examples/tutorial.jl\"","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we show two use cases for this package. Corner plots can be produced from either a dictionary or an MCMCChains instance. When using a dictionary, each value can be a vector (representing a single chain) or an array, where each column represents a chain. Below we create some mock values uniformly samples between zero and one, and add a weight. If the weight is not included, the package will weigh all samples equally.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using CornerPlotting\nusing CairoMakie\nusing Distributions\n\nresults = Dict(:a=>rand(500_000,3), :b=>rand(500_000,3), :c=>rand(500_000,3))\nresults[:weights] = results[:a].*results[:b]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can the produce the corner plot. We use Makie as the plotting backend, and we provide a default theme.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"set_theme!(CornerPlotting.default_theme())\ncorner_plot = CornerPlotting.CornerPlot(results,[:a, :b, :c])\ncorner_plot.fig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The plotter also works with MCMCChains produced with Turing.jl. The example below samples a few variables (two of them correlated) and then includes in the corned plot the sampled variables to verify we obtain the expected result. Model is sampled with 4 chains here.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Turing\nusing Distributions\n\n@model function test_MCMC()\n    a ~ Normal(0.5,3)\n    b ~ Normal(0.1, 5)\n    x ~ MvNormal([1.0, 2.0], [1.0 0.5;0.5 1.0])\nend\n\nnum_chains = 4\nchain = sample(test_MCMC(), NUTS(), MCMCThreads(), 1000, num_chains)\n\n\ncorner_plot = CornerPlotting.CornerPlot(chain,[:a, :b, Symbol(\"x[1]\"), Symbol(\"x[2]\")])\nCornerPlotting.plot_extra_1D_distribution(corner_plot, :a, Normal(0.5,3))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, :b, Normal(0.1,5))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, Symbol(\"x[1]\"), Normal(1.0,1.0))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, Symbol(\"x[2]\"), Normal(2.0,1.0))\ncorner_plot.fig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The same can be achieved when there is only one chain available","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"chain = sample(test_MCMC(), NUTS(), 5000)\n\n\ncorner_plot = CornerPlotting.CornerPlot(chain,[:a, :b, Symbol(\"x[1]\"), Symbol(\"x[2]\")])\nCornerPlotting.plot_extra_1D_distribution(corner_plot, :a, Normal(0.5,3))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, :b, Normal(0.1,5))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, Symbol(\"x[1]\"), Normal(1.0,1.0))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, Symbol(\"x[2]\"), Normal(2.0,1.0))\ncorner_plot.fig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Finally, all axes of the plot can be accesed from the CornerPlot struct. This allows us to add arbitrary content.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"xvals = LinRange(-5.0, 5.0, 100)\nyvals = LinRange(0.0, 0.1, 100)\n\naxis_1d = corner_plot.distributions_1d[:a]\nlines!(axis_1d, xvals, yvals)\naxis_2d = corner_plot.distributions_2d[:a][Symbol(\"x[1]\")]\nscatter!(axis_2d, [0.0], [1.0], color=:red, markersize=30)\n\ncorner_plot.fig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Beware that in the example above you can access corner_plot.distributions_2d[:a][:b], but corner_plot.distributions_2d[:b][:a] is not defined. The first reference corresponds to the x-axis of the 2D marginalized distribution, while the second one corresponds to the y-axis, and a matching plot must be present in the figure.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This page was generated using Literate.jl.","category":"page"}]
}
