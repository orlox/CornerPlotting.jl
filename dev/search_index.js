var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CornerPlotting","category":"page"},{"location":"#CornerPlotting","page":"Home","title":"CornerPlotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CornerPlotting.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CornerPlotting]","category":"page"},{"location":"#CornerPlotting.CornerPlot","page":"Home","title":"CornerPlotting.CornerPlot","text":"struct CornerPlot\n\nDescription\n\nArguments:\n\nOutput:\n\n\n\n\n\n","category":"type"},{"location":"#CornerPlotting.CornerPlot-Tuple{Any, Vector{Symbol}}","page":"Home","title":"CornerPlotting.CornerPlot","text":"CornerPlot()\n\nDescription\n\nArguments:\n\nOutput:\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.get_bounds_for_fractions-Tuple{Any, Any}","page":"Home","title":"CornerPlotting.get_bounds_for_fractions","text":"get_bounds_for_fractions(h, fractions)\n\nDescription Calculate the bounds containing the specified fraction(s) of area.\n\nArguments:\n\nh:         the densities contained in the bins\nfractions: the fractional area that should be bounded\n\nOutput:\n\nbounds:    the limits of the bounding area\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.plot_1D_density-NTuple{6, Any}","page":"Home","title":"CornerPlotting.plot_1D_density","text":"plot_1D_density()\n\nDescription\n\nArguments:\n\nOutput:\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.plot_2D_density-NTuple{9, Any}","page":"Home","title":"CornerPlotting.plot_2D_density","text":"create_2D_density()\n\nDescription\n\nArguments:\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.plot_compound_1D_density-NTuple{7, Any}","page":"Home","title":"CornerPlotting.plot_compound_1D_density","text":"create_marginalized_1D_densities()\n\nArguments:\n\nOutput:\n\n\n\n\n\n","category":"method"},{"location":"#CornerPlotting.plot_extra_1D_distribution-Tuple{Any, Any, Distributions.Distribution}","page":"Home","title":"CornerPlotting.plot_extra_1D_distribution","text":"plot_extra_1D_distribution()\n\nDescription\n\nArguments:\n\nOutput:\n\n\n\n\n\n","category":"method"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"EditURL = \"../../examples/tutorial.jl\"","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we show two use cases for this package. Corner plots can be produced from either a dictionary or an MCMCChains instance. When using a dictionary, each value can be a vector (representing a single chain) or an array, where each column represents a chain. Below we create some mock values uniformly samples between zero and one, and add a weight. If the weight is not included, the package will weigh all samples equally.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using CornerPlotting\nusing CairoMakie\nusing Distributions\n\nresults = Dict(:a=>rand(500_000,3), :b=>rand(500_000,3), :c=>rand(500_000,3))\nresults[:weights] = results[:a].*results[:b]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can the produce the corner plot. We use Makie as the plotting backend, and we provide a default theme.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"set_theme!(CornerPlotting.default_theme())\ncorner_plot = CornerPlotting.CornerPlot(results,[:a, :b, :c])\ncorner_plot.fig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The plotter also works with MCMCChains produced with Turing.jl. The example below samples a few variables (two of them correlated) and then includes in the corned plot the sampled variables to verify we obtain the expected result. Model is sampled with 4 chains here.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Turing\nusing Distributions\n\n@model function test_MCMC()\n    a ~ Normal(0.5,3)\n    b ~ Normal(0.1, 5)\n    x ~ MvNormal([1.0, 2.0], [1.0 0.5;0.5 1.0])\nend\n\nnum_chains = 4\nchain = sample(test_MCMC(), NUTS(), MCMCThreads(), 1000, num_chains)\n\n\ncorner_plot = CornerPlotting.CornerPlot(chain,[:a, :b, Symbol(\"x[1]\"), Symbol(\"x[2]\")])\nCornerPlotting.plot_extra_1D_distribution(corner_plot, :a, Normal(0.5,3))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, :b, Normal(0.1,5))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, Symbol(\"x[1]\"), Normal(1.0,1.0))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, Symbol(\"x[2]\"), Normal(2.0,1.0))\ncorner_plot.fig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The same can be achieved when there is only one chain available","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"chain = sample(test_MCMC(), NUTS(), 5000)\n\n\ncorner_plot = CornerPlotting.CornerPlot(chain,[:a, :b, Symbol(\"x[1]\"), Symbol(\"x[2]\")])\nCornerPlotting.plot_extra_1D_distribution(corner_plot, :a, Normal(0.5,3))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, :b, Normal(0.1,5))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, Symbol(\"x[1]\"), Normal(1.0,1.0))\nCornerPlotting.plot_extra_1D_distribution(corner_plot, Symbol(\"x[2]\"), Normal(2.0,1.0))\ncorner_plot.fig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Finally, all axes of the plot can be accesed from the CornerPlot struct. This allows us to add arbitrary content.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"xvals = LinRange(-5.0, 5.0, 100)\nyvals = LinRange(0.0, 0.1, 100)\n\naxis_1d = corner_plot.distributions_1d[:a]\nlines!(axis_1d, xvals, yvals)\naxis_2d = corner_plot.distributions_2d[:a][Symbol(\"x[1]\")]\nscatter!(axis_2d, [0.0], [1.0], color=:red, markersize=30)\n\ncorner_plot.fig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Beware that in the example above you can access corner_plot.distributions_2d[:a][:b], but corner_plot.distributions_2d[:b][:a] is not defined. The first reference corresponds to the x-axis of the 2D marginalized distribution, while the second one corresponds to the y-axis, and a matching plot must be present in the figure.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This page was generated using Literate.jl.","category":"page"}]
}
